apiVersion: batch/v1
kind: Job
metadata:
  name: 910-ai-patch-ingress
  annotations:
    argocd.argoproj.io/sync-wave: "910"
  namespace: {{.Values.spec.aiManager.namespace}}
spec:
  template:
    spec:
      containers:
        - name: config
          image: quay.io/openshift/origin-cli:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          command:
            - /bin/sh
            - -c
            - |
              set -x


              echo "   --------------------------------------------------------------------------------------------"
              echo "    ðŸš€  Patching Certs, new method" 
              echo "   --------------------------------------------------------------------------------------------"


              IAF_STORAGE=$(oc get AutomationUIConfig -n {{.Values.spec.aiManager.namespace}} -o jsonpath='{ .items[*].spec.storage.class }')
              oc get -n {{.Values.spec.aiManager.namespace}} AutomationUIConfig iaf-system -oyaml > iaf-system-backup.yaml
              oc delete -n {{.Values.spec.aiManager.namespace}} AutomationUIConfig iaf-system
              cat <<EOF | oc apply -f -
              apiVersion: core.automation.ibm.com/v1beta1
              kind: AutomationUIConfig
              metadata:
                name: iaf-system
                namespace: {{.Values.spec.aiManager.namespace}}
              spec:
                description: AutomationUIConfig for cp4waiops
                license:
                  accept: true
                version: v1.0
                storage:
                  class: $IAF_STORAGE
                tls:
                  caSecret:
                    key: ca.crt
                    secretName: external-tls-secret
                  certificateSecret:
                    secretName: external-tls-secret
              EOF


              echo "   --------------------------------------------------------------------------------------------"
              echo "    ðŸš€  Patching Certs, old method first" 
              echo "   --------------------------------------------------------------------------------------------"

              # collect certificate from OpenShift ingress
              ingress_pod=$(oc get secrets -n openshift-ingress | grep tls | grep -v router-metrics-certs-default | awk '{print $1}')
              oc get secret -n openshift-ingress -o 'go-template=\{\{index .data "tls.crt"\}\}' ${ingress_pod} | base64 -d > cert.crt
              oc get secret -n openshift-ingress -o 'go-template=\{\{index .data "tls.key"\}\}' ${ingress_pod} | base64 -d > cert.key
              oc get secret -n {{.Values.spec.aiManager.namespace}} iaf-system-automationui-aui-zen-ca -o 'go-template=\{\{ndex .data "ca.crt"\}\}'| base64 -d > ca.crt
              # backup existing secret
              oc get secret -n {{.Values.spec.aiManager.namespace}} external-tls-secret -o yaml > external-tls-secret$(date +%Y-%m-%dT%H:%M:%S).yaml
              # delete existing secret
              oc delete secret -n {{.Values.spec.aiManager.namespace}} external-tls-secret
              # create new secret
              oc create secret generic -n {{.Values.spec.aiManager.namespace}} external-tls-secret --from-file=ca.crt=ca.crt --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key --dry-run=client -o yaml | oc apply -f -
              #oc create secret generic -n {{.Values.spec.aiManager.namespace}} external-tls-secret --from-file=cert.crt=cert.crt --from-file=cert.key=cert.key --dry-run=client -o yaml | oc apply -f -
              # scale down nginx
              REPLICAS=2
              oc scale Deployment/ibm-nginx --replicas=0
              # scale up nginx
              sleep 3
              oc scale Deployment/ibm-nginx --replicas=${REPLICAS}
              rm cert.crt
              rm cert.key
              rm ca.crt
              rm external-tls-secret

              NGINX_READY=$(oc get pod -n {{.Values.spec.aiManager.namespace}} | grep "ibm-nginx" | grep "0/1" || true) 
              while  ([[  $NGINX_READY =~ "0/1" ]]); do 
                  NGINX_READY=$(oc get pod -n {{.Values.spec.aiManager.namespace}} | grep "ibm-nginx" | grep "0/1" || true) 
                  echo "      â­• Nginx not ready. Waiting for 10 seconds...." && sleep 10; 
              done

              oc delete pod $(oc get po -n {{.Values.spec.aiManager.namespace}}|grep slack|awk '{print$1}') -n {{.Values.spec.aiManager.namespace}} --grace-period 0 --force




      restartPolicy: Never
      serviceAccountName: openshift-argocd-admin-ai
  backoffLimit: 4
